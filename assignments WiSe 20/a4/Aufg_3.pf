#<	Stephan Jokiel
	Maxine Rahlfes	>#

# data definition
List: {                            # A list is either
    Null: ()                       # empty or
    Pair: (first :Obj, rest :List) # a first element followed by a rest-list.
} datadef

# Turns an array into a list.
tolist: (a :Arr -> :List) {
    null a reverse { swap pair } for
} fun

# Turns a list into a string.
tostr: (l :List -> :Str) {
    { l null? } { "" }
    { l pair-rest null? } { l pair-first str }
    { true } { 
        l pair-first str " " +  
        l pair-rest recur + 
    }
} cond-fun
 
[1 2 3 4 5] tolist x!
x tostr "1 2 3 4 5" test=
null tostr "" test=
5 null pair tostr "5" test=   
5 6 null pair pair tostr "5 6" test=  

################################################## 

# a) todo: implement and write purpose statemen
# Fügt x der Liste l hinzu 
lprepend: (l :List, x :Obj -> :List) {
    x l pair
} fun

null 10 lprepend 20 lprepend 30 lprepend y!
y tostr "30 20 10" test=

# b) todo: implement and write purpose statement
# Überprüft, ob in l ein String vorhanden ist
has-string?: (l :List -> :Bool) {
    { l null? } { false }   # wenn Liste leer, dann falsch 
    { l pair? } {
        l pair-first str? { true } #wenn Objekt in Liste, dann prüfen, ob str
        {l pair-rest has-string? } if  #rekursion: restliche Werte der Liste auf str überprüfen
    }
} cond-fun
 
x has-string? false test=
"a" null pair has-string? true test=
["a" 1] tolist has-string? true test=
[1 "a"] tolist has-string? true test=
[1 2] tolist has-string? false test=
[1 2 "b"] tolist has-string? true test=

# c) todo: implement and write purpose statement
# Überüft, ob l bloß aus Zahlen besteht 
only-numbers?: (l :List -> :Bool) {
    { l null? } { true }  # true wenn Liste leer
    { true } {              #wenn Liste nicht leer, dann überürüfen, ob Objekt eine Zahl ist 
        l pair-first num? l pair-rest only-numbers? and #und durch Rekursion auch, ob die restlichen Elemente der Liste zahlen sind
    }
} cond-fun

x only-numbers? true test=
null only-numbers? true test=
"a" null pair only-numbers? false test=
["a" 1] tolist only-numbers? false test=
[1 2] tolist only-numbers? true test=
 
# d) todo: implement and write purpose statement
# Fragt nach strings in der Liste l und gibt schließlich nur diese als Liste aus
keep-strings: (l :List -> :List) {
    { l null? } { null } # Abbruch, wenn Liste leer
    { l pair? } {   
        l pair-first str? {     # vorderstes Element in Liste str?
        l pair-first            # wenn ja, merken 
        l pair-rest keep-strings pair }  #und restlichen Liste wieder auf str überprüfen (rekursion)
        { l pair-rest keep-strings }if      #wenn nein, dann mit der restlichen Liste weider von vorne anfangen
    } 
} cond-fun

["hello" "world" 1 true "hallo"] tolist x!
x keep-strings tostr "hello world hallo" test= 

# e) todo: implement and write purpose statement
# Gibt eine Reihe von Zahlen von i bis n als Liste wider 
range: (i :Int, n :Int -> :List) {
    { i n > } { null }  #Abbruch-Bedingung: wenn Liste leer ist
    { true } {          # wenn nicht leer
        i i 1 + n range pair    #dann i merken und i um ein erhöhen, mit n geht es dann wieder in die range-Funktion
        }   
} cond-fun  
 
1 10 range tostr "1 2 3 4 5 6 7 8 9 10" test=
3 7 range tostr "3 4 5 6 7" test=

test-stats
