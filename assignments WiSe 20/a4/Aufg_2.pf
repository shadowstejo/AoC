#<	Stephan Jokiel
	Maxine Rahlfes	>#

#<
Entwickeln Sie Programm zur Erstellung von Text-Statistiken. Eingabe der Funktion ist
eine Zeichenkette beliebiger Länge. Ausgabe ist eine statistische Zusammenfassung der
Zeichenkette, mit folgenden Komponenten: Anzahl Zeichen (inkl. Leerraum), Anzahl
Buchstaben (a-z bzw. A-Z), Anzahl Ziffern (0-9)),
Anzahl Sätze (Sätzen enden mit „.“, „!“ oder „?“) und Anzahl Zeilen. Zum Leerraum
(whitespace) gehören folgende Steuerzeichen: Leerzeichen (" "), Tabulator ("\t"),
Zeilenvorschub ("\n") und Wagenrücklauf ("\n"). Im Eingabetext erlaubt sind Zeichen
mit einem ASCII-Code zwischen 32 (Leerzeichen) und 126 (Tilde) sowie Leerraum (also
insbesondere sind keine Umlaute erlaubt).
>#

# The data definition of text statistics.
Stats: (
    chars :Int
    letters :Int
    digits :Int
    lines :Int
    sentences :Int
) datadef
 
# Returns true if c is a digit (0-9).
digit?: (c :Int){ 
    c 48 >= c 57 <= and 
    }fun

# Returns true if c is a letter (a-z or A-Z).
letter?: (c :Int) { 
    c 97 >= c 122 <= and c 65 >= c 90 <= and or 
} fun

line?: (c :Int){ 
    c 10 =
    }fun

sentence?: (c :Int){
    [ c 63 = c 33 = c 46 =  ] or
}fun

# Counts the number of characters for which the predicate proc returns true.
# The predicate has the signature: proc: (c :Int -> :Bool)
counter: 0 !

count: (s :Str, proc :ExeArr -> :Int) {
    s str->chars {                      # string wird in chars (ASCII-Code) umgewandelt
        proc {                          #proc ist die ExeArr, die durch die Funktion stats an diese Funktion gegeben wird (z.B digit, letter etc.)
            counter 1 + counter!        # for schleife prüft jeden einzelnen wert in der Array if ExeArr true dann wird 1 zum counter addiert, solange bis Str zu Ende ist
        } if 

    }for 
    counter
    
     # todo: implement using a PostFix for-loop over s
} fun

 
 
# Computes text statistics given a text string.
text-stats: (text :Str -> :Stats) {
   text length                      # gibt an, wie viele Zeichen es in dem Str gibt 
   text { letter? } count           # sr und ExeArr Digit werden an die Funktion count gegeben 
   text { digit? } count               
   text { line? } count 1 +
   text { sentence? } count


   
     
    # todo: compute each component value for text using count and letter?
    # todo: you may define other helper functions if necessary
    # note: the ASCII code of a character can be obtained like this: "a" .0 ==> 97
    # todo: return stats at the end 
    stats # chars letters digits lines sentences stats
} fun 

text-stats-test: {
    # chars letters digits lines sentences stats
    "hello 5" text-stats, 7 5 1 1 0 stats, test=
    "hello world" text-stats, 11 10 0 1 0 stats, test=
    "Hello! How are you?" text-stats, 19 14 0 1 2 stats, test=
    "Hello!\nHow are you?" text-stats, 19 14 0 2 2 stats, test=
    "Hello!\n\nHow are you?" text-stats, 20 14 0 3 2  stats, test=
    "1234 5678" text-stats, 9 0 8 1 0  stats, test=
    "1234\n567890" text-stats, 11 0 10 2 0  stats, test=
    test-stats
} fun
text-stats-test
