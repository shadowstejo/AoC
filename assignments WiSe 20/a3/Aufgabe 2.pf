#<	Stephan Jokiel
	Maxine Rahlfes	>#

#<
Implement a tempomat that keeps a vehicle speed within desired limits. 
The tempomat shall brake or accelerate, respectively, if the current 
speed differs by 2% or more from the target speed. The tempomat 
should do nothing if the speed is within ±2% of the target speed. 
If the current speed or the target speed is less than 0 km/h, the tempomat 
should execute an emergency stop (hard stop). If the current speed is 
greater than 250 km/h, the tempomat should brake.
>#

# current-speed :Num, Die aktuelle Geschwindigkeit
# target-speed :Num, angezielte Geschwindigkeit im Tempomat
#enumeration of tempomat states:
:brake, :accelerate, :idle, :emergency-stop
#<
@param current-speed Aktuelle Geschwindigkeit
@param target-speed Geschwindigkeit im Tempomat
@return Sollte die Geschwindigkeit anpassen.
>#
tempomat-control: (current-speed :Num, target-speed :Num -> :Sym) {
    { current-speed 0 < target-speed 0 < or } { :emergency-stop }
    { current-speed 250 > } { :brake }
    { current-speed target-speed 1.02 * > } {:brake }
    { target-speed dup 0.02 * - current-speed <= target-speed 1.02 * current-speed <= or } {:idle}
    { current-speed target-speed dup 0.02 * - < } { :accelerate }
} cond-fun


tempomat-control-test: {
    0   150 tempomat-control :accelerate test=
    150 150 tempomat-control :idle test=
    148 150 tempomat-control :idle test=
    260 200 tempomat-control :brake test=
    260 300 tempomat-control :brake test=
   -20  100 tempomat-control :emergency-stop test=
    20  -10 tempomat-control :emergency-stop test=
    20 -100 tempomat-control :emergency-stop test=
   -20  100 tempomat-control :emergency-stop test=
    150 180 tempomat-control :accelerate test=
    256 300 tempomat-control :brake test=
    250 300 tempomat-control :accelerate test=
    103 100 tempomat-control :brake test=
    102 100 tempomat-control :idle test=
    97  100 tempomat-control :accelerate test=
    98  100 tempomat-control :idle test=
   
    test-stats
} fun

tempomat-control-test

# Don't change the code below this point, 
# except for calling animate at the very bottom.
# Clicking sets target speed.

animate: {
    "tempomat" 700 100 [0 100] [
        on-draw: (state :Arr) {
            state .0 current-speed!
            state .1 target-speed!
            
            [rectangle: 150 20 "white"] label!
            [overlay: [[text: "current speed: " current-speed int str + 14] label] ] cur-label!
            [overlay: [[text: "target speed: " target-speed int str + 14] label] ] tar-label!
            [rectangle: current-speed 2 * 20 "black"] cur-bar!
            [rectangle: target-speed 2 * 20 "black"] tar-bar!
            [above: [[beside: [cur-label cur-bar] "center"]
                     [beside: [tar-label tar-bar] "center"]] 
                     x-align: "left"]
              
        } lam
        on-tick: (state :Arr -> :Obj) { 
            state .0 current-speed!
            state .1 target-speed!
            current-speed target-speed tempomat-control action!
            {
                { action :accelerate = } { current-speed: current-speed 0.5 + ! }
                { action :brake = } { current-speed: current-speed -0.5 + ! }
                { action :hard-stop = } { current-speed: 0 ! }
            } cond
            state 0 current-speed set
        } lam
        on-mouse-press: (state x y -> :Obj) { 
            x 150 - 0 max 2 / target-speed!
            state 1 target-speed set
            dup dup 0 get str " " + print 1 get println
        } lam
    ] show
} fun

# Animate only if you are sure that your code works. Graphics output is not
# very robust yet. An error might mean that you have to close the IDE and
# start the IDE again. Always save (Ctrl+S) your work!


animate
